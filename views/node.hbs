<!-- START SIGMA IMPORTS -->
<script src="sigma/sigma.core.js"></script>
<script src="sigma/conrad.js"></script>
<script src="sigma/utils/sigma.utils.js"></script>
<script src="sigma/utils/sigma.polyfills.js"></script>
<script src="sigma/sigma.settings.js"></script>
<script src="sigma/classes/sigma.classes.dispatcher.js"></script>
<script src="sigma/classes/sigma.classes.configurable.js"></script>
<script src="sigma/classes/sigma.classes.graph.js"></script>
<script src="sigma/classes/sigma.classes.camera.js"></script>
<script src="sigma/classes/sigma.classes.quad.js"></script>
<script src="sigma/classes/sigma.classes.edgequad.js"></script>
<script src="sigma/captors/sigma.captors.mouse.js"></script>
<script src="sigma/captors/sigma.captors.touch.js"></script>
<script src="sigma/renderers/sigma.renderers.canvas.js"></script>
<script src="sigma/renderers/sigma.renderers.webgl.js"></script>
<script src="sigma/renderers/sigma.renderers.svg.js"></script>
<script src="sigma/renderers/sigma.renderers.def.js"></script>
<script src="sigma/renderers/webgl/sigma.webgl.nodes.def.js"></script>
<script src="sigma/renderers/webgl/sigma.webgl.nodes.fast.js"></script>
<script src="sigma/renderers/webgl/sigma.webgl.edges.def.js"></script>
<script src="sigma/renderers/webgl/sigma.webgl.edges.fast.js"></script>
<script src="sigma/renderers/webgl/sigma.webgl.edges.arrow.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.labels.def.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.hovers.def.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.nodes.def.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edges.def.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edges.curve.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edges.arrow.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edges.curvedArrow.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edgehovers.def.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edgehovers.curve.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edgehovers.arrow.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.edgehovers.curvedArrow.js"></script>
<script src="sigma/renderers/canvas/sigma.canvas.extremities.def.js"></script>
<script src="sigma/renderers/svg/sigma.svg.utils.js"></script>
<script src="sigma/renderers/svg/sigma.svg.nodes.def.js"></script>
<script src="sigma/renderers/svg/sigma.svg.edges.def.js"></script>
<script src="sigma/renderers/svg/sigma.svg.edges.curve.js"></script>
<script src="sigma/renderers/svg/sigma.svg.labels.def.js"></script>
<script src="sigma/renderers/svg/sigma.svg.hovers.def.js"></script>
<script src="sigma/middlewares/sigma.middlewares.rescale.js"></script>
<script src="sigma/middlewares/sigma.middlewares.copy.js"></script>
<script src="sigma/misc/sigma.misc.animation.js"></script>
<script src="sigma/misc/sigma.misc.bindEvents.js"></script>
<script src="sigma/misc/sigma.misc.bindDOMEvents.js"></script>
<script src="sigma/misc/sigma.misc.drawHovers.js"></script>
<!-- END SIGMA IMPORTS -->
<div id="container">
    <style>
        #graph-container {
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            position: absolute;
        }
    </style>
    <div id="graph-container"></div>
</div>
<script>

    let s;
    let g = {
      nodes: [],
      edges: []
    };

    (async function () {
        let nodesRes = await getGraph(100);

        nodesRes.forEach(node => {
          g.nodes.push({
              id: node.uid,
              label: node.title,
              x: Math.random(),
              y: Math.random(),
              size: Math.random(),
              color: '#666'
          });

          node.edges.forEach(edge => {
            g.edges.push({
                id: `${node.uid}_${edge}`,
                source: node.uid,
                target: edge,
                size: Math.random(),
                color: '#ccc'
            });
          });
        });

        s = new sigma({
            graph: g,
            container: 'graph-container'
        });
    })();

    async function getGraph(limit) {
        return new Promise((resolve, reject) => {
            fetch(`http://localhost:3000/api/node?limit=${limit}`)
                    .then(res => {
                        return resolve(res.json())
                    })
        })
    }

</script>
