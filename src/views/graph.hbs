<!-- START SIGMA IMPORTS -->
<script src="/public/sigma/sigma.core.js"></script>
<script src="/public/sigma/conrad.js"></script>
<script src="/public/sigma/utils/sigma.utils.js"></script>
<script src="/public/sigma/utils/sigma.polyfills.js"></script>
<script src="/public/sigma/sigma.settings.js"></script>
<script src="/public/sigma/classes/sigma.classes.dispatcher.js"></script>
<script src="/public/sigma/classes/sigma.classes.configurable.js"></script>
<script src="/public/sigma/classes/sigma.classes.graph.js"></script>
<script src="/public/sigma/classes/sigma.classes.camera.js"></script>
<script src="/public/sigma/classes/sigma.classes.quad.js"></script>
<script src="/public/sigma/classes/sigma.classes.edgequad.js"></script>
<script src="/public/sigma/captors/sigma.captors.mouse.js"></script>
<script src="/public/sigma/captors/sigma.captors.touch.js"></script>
<script src="/public/sigma/renderers/sigma.renderers.canvas.js"></script>
<script src="/public/sigma/renderers/sigma.renderers.webgl.js"></script>
<script src="/public/sigma/renderers/sigma.renderers.svg.js"></script>
<script src="/public/sigma/renderers/sigma.renderers.def.js"></script>
<script src="/public/sigma/renderers/webgl/sigma.webgl.nodes.def.js"></script>
<script src="/public/sigma/renderers/webgl/sigma.webgl.nodes.fast.js"></script>
<script src="/public/sigma/renderers/webgl/sigma.webgl.edges.def.js"></script>
<script src="/public/sigma/renderers/webgl/sigma.webgl.edges.fast.js"></script>
<script src="/public/sigma/renderers/webgl/sigma.webgl.edges.arrow.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.labels.def.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.hovers.def.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.nodes.def.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edges.def.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edges.curve.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edges.arrow.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edges.curvedArrow.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edgehovers.def.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edgehovers.curve.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edgehovers.arrow.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.edgehovers.curvedArrow.js"></script>
<script src="/public/sigma/renderers/canvas/sigma.canvas.extremities.def.js"></script>
<script src="/public/sigma/renderers/svg/sigma.svg.utils.js"></script>
<script src="/public/sigma/renderers/svg/sigma.svg.nodes.def.js"></script>
<script src="/public/sigma/renderers/svg/sigma.svg.edges.def.js"></script>
<script src="/public/sigma/renderers/svg/sigma.svg.edges.curve.js"></script>
<script src="/public/sigma/renderers/svg/sigma.svg.labels.def.js"></script>
<script src="/public/sigma/renderers/svg/sigma.svg.hovers.def.js"></script>
<script src="/public/sigma/middlewares/sigma.middlewares.rescale.js"></script>
<script src="/public/sigma/middlewares/sigma.middlewares.copy.js"></script>
<script src="/public/sigma/misc/sigma.misc.animation.js"></script>
<script src="/public/sigma/misc/sigma.misc.bindEvents.js"></script>
<script src="/public/sigma/misc/sigma.misc.bindDOMEvents.js"></script>
<script src="/public/sigma/misc/sigma.misc.drawHovers.js"></script>

<!-- Sigma plugins -->
<script src="/public/sigma/plugins/supervisor.js"></script>
<script src="/public/sigma/plugins/worker.js"></script>
<script src="/public/sigma/plugins/relativeSize.js"></script>

<div class="spinner-wrapper">
    <div class="spinner">
        <div class="bounce1"></div>
        <div class="bounce2"></div>
        <div class="bounce3"></div>
    </div>
</div>

<div id="container">
    <style>
        #graph-container {
            top: 0;
            bottom: 0;
            left: 0;
            right: 0;
            position: absolute;
        }
    </style>
    <div id="graph-container"></div>
</div>
<script>
    window.onload = fadeOutLoader;

    function fadeOutLoader () {
        let loader = document.getElementsByClassName('spinner-wrapper')[0];
        let opacity = 1;

        function fadeOut () {
            if (opacity <= 0) {
                loader.style.display = 'none';
                return;
            }
            loader.style.opacity = opacity.toString();
            opacity -= 0.02;
            window.requestAnimationFrame(fadeOut);
        }

        window.requestAnimationFrame(fadeOut);
    }
</script>
<script>

    init({{limit}}, '{{link}}');

    let s = new sigma({
        renderer: {
            container: document.getElementById('graph-container'),
            type: 'canvas'
        },
        settings: {}
    });
    let g = {
        nodes: [],
        edges: []
    };

    async function init (limit, href) {
        let nodesRes = await getGraph(limit, href);

        console.log('degrees: ', 3);
        console.log('edge_limit: ', limit);
        console.log('total nodes: ', nodesRes.length);

        nodesRes.forEach(node => {
            g.nodes.push({
                id: node.href,
                label: node.title,
                x: Math.random(),
                y: Math.random(),
                size: Math.random(),
                color: '#5976cf'
            });

            node.edges.forEach(edge => {
                g.edges.push({
                    id: `${node.href}_${edge}`,
                    source: node.href,
                    target: edge,
                    size: Math.random(),
                    color: 'rgb(179,190,213)'
                });
            });
        });

        // load the graph
        s.graph.read(g);
        sigma.plugins.relativeSize(s, 1);
        s.refresh();
        s.startForceAtlas2();
        window.setTimeout(function () {s.killForceAtlas2()}, nodesRes.length * 2.2);

        s.bind('clickNode', function (e) {
            console.log(e);
            window.open(e.data.node.id);
        })
    }

    async function getGraph (limit, initialNode) {
        return new Promise((resolve, reject) => {
            fetch(`/api/graph?limit=${limit}&node=${initialNode}`)
                    .then(res => {
                        return resolve(res.json())
                    })
        })
    }

</script>
